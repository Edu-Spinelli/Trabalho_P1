#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re
_nick_dict = {}


def verifica(conexao, dados):
    dados = dados.strip()
    
    if dados == b'':
        return sair(conexao)
    
    
#MENSAGENS TIPO PING    
#######################################################################################################################################
    if dados[0:4].upper() == b'PING':
        return(conexao, b':server PONG server :' + dados.split(b' ',1)[1]+b'\r\n')
#######################################################################################################################################
    
    
#TRATAMENTO MENSAGENS TIPO NICK
#######################################################################################################################################
    if dados[0:4].upper() == b'NICK':
        comando, apelido = dados.split(b' ',1)
        
        apelido_atual = _nick_dict.get(conexao)
        
        if apelido_atual is None:
            apelido_atual = b'*'
        
        if not validar_nome(apelido):
            return(conexao, b':server 432 ' + apelido_atual + b' ' + apelido + b' :Erroneous nickname\r\n')
            
        
        if apelido.lower() in _nick_dict.values():
            return(conexao, b':server 433 '+ apelido_atual + b' ' +  apelido + b' :Nickname is already in use\r\n')
        
        if apelido_atual !=b'*':
            _nick_dict[conexao] = apelido.lower()
            return(conexao, b':' + apelido_atual + b' NICK ' + apelido + b'\r\n')
            
            
        if apelido_atual == b'*':
            _nick_dict[conexao] = apelido.lower()
        
        return(conexao, b':server 001 '+ apelido + b' :Welcome\r\n:server 422 ' + apelido + b' :MOTD File is missing\r\n')
#######################################################################################################################################


#TRATAMENTO MENSAGENS TIPO PRIVMSG
#######################################################################################################################################
 
    
    
    
    
    
def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    
    mensagens = []
    global _dados_residuais
    
    #verificacao de comandos
    if not dados.startswith((b'PING', b'PRIVMSG', b'NICK', b'JOIN', B'PART')):
        linha = _dados_residuais + dados
    else:
        linha = dados
    mensagens = linha.split(b'\r\n')
        
    
    #dados residuais
    if not mensagens[-1].endswith(b'\r\n'):
        _dados_residuais = mensagens.pop(-1)
    else:
        _dados_residuais = b''
        
    for mensagem in mensagens:
        print(conexao,mensagem)
        alvo,resposta = verifica(conexao, mensagem)
        print(alvo, resposta)
        
        if mensagem != b'':
            alvo.enviar(resposta)
            


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
_dados_residuais = b''
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
